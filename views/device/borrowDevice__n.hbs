<main>
    <div class="container">
        <div class="row">
            <div class="col-12" id="menu_borrow">
                <ul class="menu_borrow">
                    {{#if selectMenus}}
                    {{#each selectMenus}}
                    <li class="nav_borrow" id="Menu_{{id_category}}">
                        <a href="javascript:void(0)"
                            onclick="getChildMenu({{id_category}},this,'product')">{{name_category}}</a>
                    </li>
                    {{/each}}
                    {{/if}}
                </ul>
            </div>
        </div>
    </div>
</main>
<div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" id="openModel"
    aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">

                <h5 class="modal-title text-uppercase text-center" id="exampleModalLabel">Chi tiết sản phẩm</h5>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-6">
                        <span class="badge badge-secondary mb-2">Tên sản phẩm</span> <span class="name_device"></span>
                        <br>
                        <span class="badge badge-secondary  mb-2">Vị
                            trí</span> <span class="position"></span> <br>
                        <span class="badge badge-secondary  mb-2 nameAuthAlreadyBorrow"> </span> <br>
                    </div>
                    <div class="col-6">
                        <img width="100%" height="100px" src="" class="image" alt="image device"
                            style="object-fit: cover;">
                    </div>

                </div>
                <div class="row">
                    <div class="col-12">
                        <div class="layout-cabinet" width="100px" height="100px"></div>
                    </div>
                </div>

                <button type="button" class="btn btn-dark btn-borrow"
                    style="width: 100%;margin: 15px 0;text-transform: uppercase;" onclick="fBorrow()">Mượn</button>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary closeModel" data-dismiss="modal">Thoát</button>

            </div>
        </div>
    </div>
</div>
<input type="hidden" class="rfid_hide">

{{#section 'js'}}
<script>
    let closeModel = document.querySelector('.closeModel');
    console.log(closeModel);
    function fBorrow() {
        let rfid = document.querySelector('.rfid_hide').value;
        let name_device = document.querySelector('span.name_device').textContent;
        let full_name_header = document.querySelector('.full_name_header').textContent;
        let dateToday = new Date().getTime();
        let data = {
            rfid,
            date_rent: dateToday,
            note_report: "Muon dung cu"
        }
        fetch("/device/get-borrow", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        }).then(response => response.json())
            .then(data => {
                if (data.msgErr == undefined) {
                    socket.emit('CLIENT_BORROW_DEVICE', ({ full_name: `${full_name_header}`, name_device: `${name_device}` }));
                    closeModel.click();

                }
            }).catch(error => console.log(error.message))
    }
    function showPosition() {

        let lrue = 0;
        let data = '[\
    {"item1": "2/2/6/2", "item2": "2/3/6/5", "item3": "2/5/6/7","item4": "2/7/6/8","item5": "2/9/6/10","item6": "2/10/6/12","item7": "2/12/6/14","item8": "2/14/6/16","item9": "2/16/6/18","item10": "2/18/6/19",\
    "item11": "7/2/12/2","item12": "7/3/12/5", "item13": "7/5/11/7","item14": "7/7/11/9","item15": "7/9/11/10","item16": "7/10/12/12","item17": "7/12/11/13","item18": "7/14/11/15","item19": "7/15/12/17","item20": "7/17/12/18", "item21": "7/18/12/19"},\
    {"item1": "2/2/6/2", "item2": "2/3/6/5", "item3": "2/5/6/7","item4": "2/7/6/8","item5": "2/9/6/10","item6": "2/10/6/12","item7": "2/12/6/14","item8": "2/14/6/16","item9": "2/16/6/18","item10": "2/18/6/19",\
    "item11": "7/2/12/2","item12": "7/3/12/5", "item13": "7/5/11/7","item14": "7/7/11/9","item15": "7/9/11/10","item16": "7/10/12/12","item17": "7/12/11/13","item18": "7/14/11/15","item19": "7/15/12/17","item20": "7/17/12/18", "item21": "7/18/12/19"},\
    {"item1": "2/2/6/2", "item2": "2/3/6/5", "item3": "2/5/6/7","item4": "2/7/6/8","item5": "2/9/6/10","item6": "2/10/6/12","item7": "2/12/6/14","item8": "2/14/6/16","item9": "2/16/6/18","item10": "2/18/6/19",\
    "item11": "7/2/12/2","item12": "7/3/12/5", "item13": "7/5/11/7","item14": "7/7/11/9","item15": "7/9/11/10","item16": "7/10/12/12","item17": "7/12/11/13","item18": "7/14/11/15","item19": "7/15/12/17","item20": "7/17/12/18", "item21": "7/18/12/19"},\
    {"item1": "2/2/7/12", "item2": "8/2/12/10","item3": "2/13/4/19","item4": "5/13/8/19","item5": "9/11/13/19"},\
    {"item1": "2/2/7/12", "item2": "8/2/12/10","item3": "2/13/4/19","item4": "5/13/8/19","item5": "9/11/13/19"}\
    ]';
        let pos = ["2/1", "2/2", "2/3", "2/4", "2/5", "2/6", "2/7", "2/8", "2/9", "2/10", "3/1", "3/2", "3/3", "3/4", "3/5", "3/6", "3/7", "3/8", "3/9", "3/10", "3/11"];
        data = JSON.parse(data);
        let position = document.querySelector('span.position').innerText;
        let allSlots = document.querySelectorAll(".slot");
        if (allSlots.length > 0) {
            for (let i = 0; i < allSlots.length; i++) {
                allSlots[i].remove();
            }
            lrue++;
            let cabinet = $(".layout-cabinet");
            cabinet.css("background-image", "url(/public/img/z2243532280893_1eb471631bae5ae1eee21622293df989.jpg)");
            $.each(data[0], function (key, val) {
                let index = key.split("item")[1];
                cabinet.append(`<div class ="slot" pos=${pos[index - 1]} id = ${key} style = "grid-area : ${val}"></div>`);
            });
            let allSlotsx = document.querySelectorAll(".slot");

            for (let i = 0; i < allSlotsx.length; i++) {
                let position_img = allSlotsx[i].getAttribute("pos");
                if (position_img == position) {

                    allSlotsx[i].style.backgroundColor = 'var(--mau4)';
                    allSlotsx[i].style.opacity = "0.5";
                } else {
                    allSlotsx[i].style.backgroundColor = 'transparent';
                }
            }
        }
        else {
            lrue++;
            let cabinet = $(".layout-cabinet");
            cabinet.css("background-image", "url(/public/img/z2243532280893_1eb471631bae5ae1eee21622293df989.jpg)");
            $.each(data[0], function (key, val) {
                let index = key.split("item")[1];
                cabinet.append(`<div class ="slot" pos=${pos[index - 1]} id = ${key} style = "grid-area : ${val}"></div>`);
            });
            let allSlotss = document.querySelectorAll(".slot");
            for (let i = 0; i < allSlotss.length; i++) {
                let position_img = allSlotss[i].getAttribute("pos");
                if (position_img == position) {
                    allSlotss[i].style.backgroundColor = 'var(--mau4)';
                    allSlotss[i].style.opacity = "0.5";
                } else {
                    allSlotss[i].style.backgroundColor = 'transparent';
                }
            }

        }
    }

    //quoc xxx
    function removeVietnameseTones(str) {
        str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, "a");
        str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, "e");
        str = str.replace(/ì|í|ị|ỉ|ĩ/g, "i");
        str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, "o");
        str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, "u");
        str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, "y");
        str = str.replace(/đ/g, "d");
        str = str.replace(/À|Á|Ạ|Ả|Ã|Â|Ầ|Ấ|Ậ|Ẩ|Ẫ|Ă|Ằ|Ắ|Ặ|Ẳ|Ẵ/g, "A");
        str = str.replace(/È|É|Ẹ|Ẻ|Ẽ|Ê|Ề|Ế|Ệ|Ể|Ễ/g, "E");
        str = str.replace(/Ì|Í|Ị|Ỉ|Ĩ/g, "I");
        str = str.replace(/Ò|Ó|Ọ|Ỏ|Õ|Ô|Ồ|Ố|Ộ|Ổ|Ỗ|Ơ|Ờ|Ớ|Ợ|Ở|Ỡ/g, "O");
        str = str.replace(/Ù|Ú|Ụ|Ủ|Ũ|Ư|Ừ|Ứ|Ự|Ử|Ữ/g, "U");
        str = str.replace(/Ỳ|Ý|Ỵ|Ỷ|Ỹ/g, "Y");
        str = str.replace(/Đ/g, "D");
        // Some system encode vietnamese combining accent as individual utf-8 characters
        // Một vài bộ encode coi các dấu mũ, dấu chữ như một kí tự riêng biệt nên thêm hai dòng này
        str = str.replace(/\u0300|\u0301|\u0303|\u0309|\u0323/g, ""); // ̀ ́ ̃ ̉ ̣  huyền, sắc, ngã, hỏi, nặng
        str = str.replace(/\u02C6|\u0306|\u031B/g, ""); // ˆ ̆ ̛  Â, Ê, Ă, Ơ, Ư
        // Remove extra spaces
        // Bỏ các khoảng trắng liền nhau
        str = str.replace(/ + /g, " ");
        str = str.trim();
        // Remove punctuations
        // Bỏ dấu câu, kí tự đặc biệt
        str = str.replace(/!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'|\"|\&|\#|\[|\]|~|\$|_|`|-|{|}|\||\\/g, " ");
        return str;
    }
    function showDevice(id_device, el) {
        let name_device = document.querySelector('span.name_device');
        let rfid = document.querySelector('.rfid_hide')
        let position = document.querySelector('span.position');
        let image = document.querySelector('img.image');
        let nameAuthAlreadyBorrow = document.querySelector('span.nameAuthAlreadyBorrow');
        let btn_borrow = document.querySelector('.btn-borrow');
        let data = {
            id: id_device
        }
        fetch("/device/get-device", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        }).then(response => response.json())
            .then(data => {
                rfid.value = data.rfid;
                let modal = document.querySelector('.modal.fade');
                name_device.innerHTML = data.name_device;
                position.innerHTML = data.pos_x + "/" + data.pos_y;
                image.setAttribute('src', `/public/img/${data.image}`);
                if (data.status == 1) {
                    nameAuthAlreadyBorrow.innerHTML = data.full_name + ": Đã mượn.";
                    btn_borrow.style.display = 'none';
                    nameAuthAlreadyBorrow.style.display = 'inline-block';
                } else {
                    nameAuthAlreadyBorrow.style.display = 'none';
                    btn_borrow.style.display = 'block';
                }
                showPosition();


            }).catch(err => console.log(err.message));

    }
    function getChildMenu_1(id_product, classEl, table) {
        let el = document.querySelector(classEl);
        let data = {
            id: id_product,
            table: table,
        }
        fetch("/menu/Submenu", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
            .then(response => response.json())
            .then(data => {
                if (data.length > 0) {
                    let ul = document.createElement('ul');
                    for (let i = 0; i < data.length; i++) {
                        let li = document.createElement('li');

                        li.classList.add(`subChildMenu_${i}`);
                        li.setAttribute("data-target", `#openModel`);
                        li.setAttribute("data-toggle", "modal");
                        li.setAttribute('id_device', data[i].id_device);
                        let id_device = li.getAttribute('id_device');
                        li.setAttribute('onclick', `showDevice(${id_device}, this)`);
                        let textLi = document.createTextNode(data[i].name_device);
                        li.appendChild(textLi);
                        ul.appendChild(li);
                    }
                    ul.classList.add('subChildMenu');
                    let subMenu = document.querySelector('ul.subChildMenu');
                    if (subMenu) {
                        subMenu.remove();
                        el.parentElement.appendChild(ul);
                    } else {
                        el.parentElement.appendChild(ul);
                    }
                    let active_Categories = document.querySelector('.active_Categories');
                    if (active_Categories) {
                        active_Categories.classList.remove("active_Categories");
                        el.classList.add("active_Categories");
                    } else {
                        el.classList.add("active_Categories");
                    }
                } else {
                    alert('Không có sản phẩm');
                }
            })

    }
    function getChildMenu(id_category, el, table) {
        let data = {
            id: id_category,
            table: table,
        }
        fetch("/menu/Submenu", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
            .then(response => response.json())
            .then(data => {
                if (data.length > 0) {
                    let ul = document.createElement('ul');
                    for (let i = 0; i < data.length; i++) {
                        let li = document.createElement('li');

                        li.classList.add(`subMenu_${i}`);

                        li.setAttribute('id_product', data[i].id_product);
                        let id_product = li.getAttribute('id_product');
                        li.setAttribute('onclick', `getChildMenu_1(${id_product},'li.subMenu_${i}','device')`);
                        let textLi = document.createTextNode(data[i].name_product);
                        li.appendChild(textLi);
                        ul.appendChild(li);
                    }
                    ul.classList.add('subMenu');
                    let subMenu = document.querySelector('ul.subMenu');
                    if (subMenu) {
                        subMenu.remove();
                        el.parentElement.appendChild(ul);
                    } else {
                        el.parentElement.appendChild(ul);
                    }
                    let active_Categories_parent = document.querySelector('.active_Categories_parent');
                    if (active_Categories_parent) {
                        active_Categories_parent.classList.remove("active_Categories_parent");
                        el.parentElement.classList.add("active_Categories_parent");
                    } else {
                        el.parentElement.classList.add("active_Categories_parent");
                    }
                } else {
                    alert('Không có sản phẩm');
                }
            })

    }
</script>
{{/section}}